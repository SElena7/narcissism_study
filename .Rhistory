library(data.table)
library(brms)
library(ordbetareg)
library(bayesplot)
library(tidybayes)
library(bayestestR)
library(marginaleffects)
```{# read the data}
# read the data
data <- fread("data/data.csv")
# read the data
getwd()
data <- fread("data/data.csv")
# read the data
getwd()
data <- fread("data.csv")
# filter for gender and age
d <- data[data$gender %in% c(1, 2) & data$age >= 18 & data$age <= 100, ]
# scoring
d$authority_score <- rowSums(d[, c("Q1", "Q5", "Q10", "Q11", "Q27", "Q32", "Q33", "Q34", "Q36", "Q40")], na.rm = TRUE)
d$exibitionism_score <- rowSums(d[, c("Q4", "Q7", "Q15", "Q19", "Q20", "Q26", "Q28", "Q30", "Q38", "Q39")], na.rm = TRUE)
d$entitlement_score <- rowSums(d[, c("Q3", "Q14", "Q17", "Q24")], na.rm = TRUE)
# Convert to factors
d$age.bin <- cut(d$age, breaks = 4, ordered_result = TRUE)
d$gender <- factor(d$gender, labels = c("M", "F"))
# Filter for beta regression valid range
d.beta <- d[d$authority_score > 0 & d$authority_score < 20, ]
d.beta$auth.beta <- d.beta$authority_score / 20
# Plot density
hist(d$authority_score / 20, breaks = 30, col = "lightblue", main = "Histogram of Authority Score", xlab = "Authority Score (scaled)")
# Smoothed histogram (density)
plot(density(d$authority_score / 20, na.rm = TRUE), main = "Density of Authority Score (scaled)", xlab = "Authority Score (scaled)")
# Plot density
hist(d$authority_score / 20, breaks = 30, col = "lightblue", main = "Histogram of Authority Score", xlab = "Authority Score (scaled)")
# Smoothed histogram (density)
plot(density(d$authority_score / 20, na.rm = TRUE), main = "Density of Authority Score (scaled)", xlab = "Authority Score (scaled)")
# Fit the model
auth <- ordbetareg(auth.beta ~ gender + age.bin,
data = d,
iter = 1000,
warmup = 250,
chains = 4,
cores = 4,
seed = 142,
save_pars = save_pars(all = TRUE))
d
d.beta
# Fit the model
auth <- ordbetareg(auth.beta ~ gender + age.bin,
data = d.beta,
iter = 1000,
warmup = 250,
chains = 4,
cores = 4,
seed = 142,
save_pars = save_pars(all = TRUE))
summary(auth)
pd(auth)
pp_check_ordbeta(auth)
summary(auth)
pd(auth)
pp_check_ordbeta(auth)
install.packages("transformr")
pp_check_ordbeta(auth)
install.packages(c("units", "classInt", "sf", "tweenr", "transformr"))
pp_check_ordbeta(auth)
pp_check_ordbeta(auth)
install.packages("sf", type = "binary")
auth.loo <- loo(auth)
auth.loo
#pp_check_ordbeta(auth) this doesn't work
# Manual PPC via simulations
# Simulate posterior predictive values
yrep <- posterior_predict(auth)
# Compare with actual observed values
hist(apply(yrep, 2, mean), main = "Posterior Predictive Means", xlab = "Predicted Means")
abline(v = mean(auth$data$auth.beta), col = "red", lwd = 2)
hist(apply(yrep, 2, mean), main = "Posterior Predictive Means", xlab = "Predicted Means")
abline(v = mean(auth$data$auth.beta), col = "red", lwd = 2)
auth.loo <- loo(auth)
auth.loo
# Marginal effects
auth.comp <- avg_slopes(auth, type = "response")
